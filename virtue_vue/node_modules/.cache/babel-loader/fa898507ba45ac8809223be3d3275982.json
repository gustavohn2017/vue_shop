{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-search\"\n};\nconst _hoisted_2 = {\n  class: \"columns is-multiline\"\n};\nconst _hoisted_3 = {\n  class: \"column is-12\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"title\"\n}, \"Search\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"is-size-5 has-text-grey\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ProductBox = _resolveComponent(\"ProductBox\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"h2\", _hoisted_5, \"Search term: \\\"\" + _toDisplayString($data.query) + \"\\\"\", 1 /* TEXT */)]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.products, product => {\n    return _openBlock(), _createBlock(_component_ProductBox, {\n      key: product.id,\n      product: product\n    }, null, 8 /* PROPS */, [\"product\"]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"sources":["C:\\Users\\Gustavo\\Desktop\\Portif√≥lio\\ecommerce\\virtue_vue\\src\\views\\Search.vue"],"names":[],"mappings":";;EACS,KAAK,EAAC;AAAa,CAAA;;EACf,KAAK,EAAC;AAAsB,CAAA;;EACxB,KAAK,EAAC;AAAc,CAAA;gCACrB,mBAAA,CAA6B,IAAA,EAAA;EAAzB,KAAK,EAAC;AAAO,CAAA,EAAC,QAAM,EAAA,CAAA,CAAA,CAAA,cAAA;;EAEpB,KAAK,EAAC;AAAyB,CAAA;;;uBAL/C,mBAAA,CAaM,KAAA,EAbN,UAaM,EAAA,CAZF,mBAAA,CAWM,KAAA,EAXN,UAWM,EAAA,CAVF,mBAAA,CAIM,KAAA,EAJN,UAIM,EAAA,CAHF,UAA6B,EAE7B,mBAAA,CAAmE,IAAA,EAAnE,UAAmE,EAA/B,iBAAc,GAAA,gBAAA,CAAG,KAAA,CAAA,KAAK,CAAA,GAAG,IAAC,EAAA,CAAA,CAAA,WAAA,C,sBAGlE,mBAAA,CAG+B,SAAA,EAAA,IAAA,EAAA,WAAA,CAFT,KAAA,CAAA,QAAQ,EAAnB,OAAO,IAAA;yBADlB,YAAA,CAG+B,qBAAA,EAAA;MADpB,GAAG,EAAE,OAAO,CAAC,EAAE;MACf,OAAO,EAAE","sourcesContent":["<template>\r\n    <div class=\"page-search\">\r\n        <div class=\"columns is-multiline\">\r\n            <div class=\"column is-12\">\r\n                <h1 class=\"title\">Search</h1>\r\n\r\n                <h2 class=\"is-size-5 has-text-grey\">Search term: \"{{ query }}\"</h2>\r\n            </div>\r\n\r\n            <ProductBox \r\n                v-for=\"product in products\"\r\n                v-bind:key=\"product.id\"\r\n                v-bind:product=\"product\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport ProductBox from '@/components/ProductBox.vue'\r\n\r\nexport default {\r\n    name: 'Search',\r\n    components: {\r\n        ProductBox\r\n    },\r\n    data() {\r\n        return {\r\n            products: [],\r\n            query: ''\r\n        }\r\n    },\r\n    mounted() {\r\n        document.title = 'Buscar | Djackets'\r\n\r\n        let uri = window.location.search.substring(1)\r\n        let params = new URLSearchParams(uri)\r\n\r\n        if (params.get('query')) {\r\n            this.query = params.get('query')\r\n\r\n            this.performSearch()\r\n        }\r\n    },\r\n    methods: {\r\n        async performSearch() {\r\n            this.$store.commit('setIsLoading', true)\r\n\r\n            await axios\r\n                .post('/api/v1/products/search/', {'query': this.query})\r\n                .then(response => {\r\n                    this.products = response.data\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n\r\n            this.$store.commit('setIsLoading', false)\r\n        }\r\n    }\r\n}\r\n</script>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}